import pytest
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA as RSA_LIB
from Crypto.Signature import pss

from signature_algorithm import PrivateKey, PublicKey

from ..rsa import RSA, RSAPrivateKey, RSAPublicKey


def test_key_types() -> None:
    rsa = RSA()
    with pytest.raises(TypeError):
        rsa.sign_message(b'', PrivateKey())
    with pytest.raises(TypeError):
        rsa.verify_signature(b'', PublicKey(), b'')


def test_custom_rsa() -> None:
    rsa = RSA()

    sk, pk = rsa.generate_key_pair()
    message = b'test message'

    signature = rsa.sign_message(message, sk)
    assert rsa.verify_signature(message, pk, signature)
    assert not rsa.verify_signature(message, pk, b'')  # dummy

    message2 = b'test message2'
    signature2 = rsa.sign_message(message2, sk)
    assert not rsa.verify_signature(message, pk, signature2)  # different message

    sk2, _ = rsa.generate_key_pair()
    signature3 = rsa.sign_message(message, sk2)
    assert not rsa.verify_signature(message, pk, signature3)  # different private key


def test_rsa_with_library_custom_key() -> None:
    message = b'test message'

    rsa = RSA()
    sk, pk = rsa.generate_key_pair()
    sign = rsa.sign_message(message, sk)

    key = RSA_LIB.construct((pk.n, pk.e, sk.d, sk.p, sk.q), consistency_check=True)
    h = SHA256.new(message)
    sign_lib = pss.new(key, salt_bytes=0).sign(h)

    assert sign == sign_lib


def test_rsa_with_library_library_key() -> None:
    message = b'test message'

    rsa = RSA()
    key = RSA_LIB.generate(rsa.keyBits)

    sk = RSAPrivateKey(key.p, key.q, key.e)
    pk = RSAPublicKey(key.n, key.e)

    sign = rsa.sign_message(message, sk)

    h = SHA256.new(message)
    sign_lib = pss.new(key, salt_bytes=0).sign(h)

    assert sign == sign_lib
    assert rsa.verify_signature(message, pk, sign)


def test_salt_verify() -> None:
    message = (
        0x
    ).to_bytes(967)

    signature = (
        0x875EF62F6832599F41B50CA51A478C92FF47B61F2090157F64B425B1E1AD5612E6ABB7D5808D9BE5F0EAAA16D2B516EF161534C78D542FFD659107535C2BAB643163FB9AF27A50389792508D1CDBDA347A103404C5E08D2D97C7935994631D42FE7E0CAA892DC3EC39D3AC94DBCCB3CD0870B21B9C836FEED5BC32E9EC6830392BDADE1FC9B5280FBAA2CEAA78D9524AF3D015CBAF07EEBC84A9CAEC81A4407452573A101B79772056193D207A8398690ED0DD0CC5A6410FD844D313C50934D6E1D556F8E7B39B12525F3CD766C9342FBD892E40408B0C232D888DA11FC64D0F09DB70971D395D7A1D2AACFE9DA78E3C46CE43B3CE5B9FC1E6A90C065CDAFA2E8A117D63C00CF9F54E3A3313789F03DD7EFC76641C2CF5068CA4512C82FA6C62F6BD36B12523DC46F444B8312D2F6E6EC22CD10EDDB19220D9B8BA4CC442DD836335482C6309D56E87492D2FDAEFDB7B5EDE566ED43EB87955451225846CE2535B803A9CA79034CC3AA41307CC57F0962CB8B2C3B99A5C87150387F7D8DE6A18F6A838404C4AA5BB279378FB285C096D4C2664C700AC4E3C0CB44F920928E764DD4B10F22D3CB5BDFAC78066B1B0A5AE75528E447B262510D41150A94AB0F645CC61AE99A3719BD29CF3901DDE6DE7CC162051F34C642A0F7854EF00D4143D755AD72BC71371C3A8DEDB94118272F37F853BD171743B0C7A9A8CB96095476C9C
    ).to_bytes(512)

    n = 0xD24081BE6CC14FE3FB4B35AB6DF1A7F28F373017EF15A26B67FF2DD04773A3EF8942B7BA5F2F91AEA469FE757E2E3362A907610B441F3610F528B1F39739A132C4BEBC26C37D25B6D12481336FECDDFC6BDCD011BE4F2912FF0663CB70D9938280813DD3F32F2E6FEF184881F784BBD2FD2D165B169D8594C45D832DBAEBFDCB532D6542B57413825DF5164B577DCDC248DFC4A8B071EB0BEF021128E9172B77A18A5A6B00EBC0E07AF0A9DF6592684805A4BA0DB00DDDAABF793641EC0DA51AECC6160ACD56A0194D1161271B8FEAAF0AE851AE65F1464C79607BBB237DE3DBD0A299E9CDA846C362976108D10555B57866A56C87C6A5D92D1888D6260FA90459AFB14688B8A53921D2D477D1677518956412E01EB2592B27AD62A3D3A50777C4BEE3F348B4788BB7BBD38D6BD902968A7B3640D75F98B78824EE9462E1B2D405B8C1CE7D7DBEF479C2979553790B7D7FA8A6F05DAD4CF95B92A218B410EB5B9DF712D099B6952A07F122D21E95B934E9A765E758397B191FD01C0C4AE669039A0D7003308AB78D03809752BB7B676C3F3BBD9AC4B8CF0162EFB50E01C52E3A97FED31D1E73F12B3DA7B4DF87FD7E93F70F92DC154D0BCEF5A39C9631B2B50C7C7B91F4A63D4E3D487C37FC63BBDF87B71CAD5581409661D15F77FF738A4D53D23424D999490607EBFD8293B2FB5C269CD8A19477CA88F6F7CB1ABE00FB16C9  # noqa: E501

    pk = RSAPublicKey(n, (1 << 16) + 1)

    r = RSA()
    assert r.verify_signature(message, pk, signature, 0x20)


def test_salt_signing() -> None:
    message = b'test message'

    rsa = RSA()
    sk, pk = rsa.generate_key_pair()
    sign = rsa.sign_message(message, sk, 0x20)

    key = RSA_LIB.construct((pk.n, pk.e, sk.d, sk.p, sk.q), consistency_check=True)
    h = SHA256.new(message)
    sign_lib = pss.new(key, salt_bytes=0x20).sign(h)

    assert rsa.verify_signature(message, pk, sign, 0x20)
    assert rsa.verify_signature(message, pk, sign_lib, 0x20)

    pss.new(key, salt_bytes=0x20).verify(h, sign)
